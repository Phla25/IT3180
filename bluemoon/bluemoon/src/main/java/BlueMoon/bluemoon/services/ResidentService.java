package BlueMoon.bluemoon.services;

import BlueMoon.bluemoon.models.Resident;
import BlueMoon.bluemoon.repository.ResidentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.Optional;

@Service
public class ResidentService {

    @Autowired
    private ResidentRepository residentRepository;

    public Resident findByUsername(String username) {
        System.out.println("üîç [ResidentService] T√¨m resident v·ªõi username: " + username);

        Optional<Resident> result = residentRepository.findByUsername(username);

        if (result.isEmpty()) {
            System.out.println("‚ùå [ResidentService] KH√îNG t√¨m th·∫•y resident v·ªõi username: " + username);

            try {
                // T·∫°o v√† SAVE resident m·ªõi v√†o database
                Resident newResident = new Resident();
                newResident.setFullName("C∆∞ D√¢n M·ªõi - " + username);
                newResident.setUsername(username);
                newResident.setPhoneNumber("0123456789");
                newResident.setEmail(username + "@bluemoon.com");
                newResident.setPassword("temp_password");

                // SAVE v√†o database
                Resident savedResident = residentRepository.save(newResident);
                System.out.println("‚úÖ [ResidentService] ƒê√£ t·∫°o resident m·ªõi v·ªõi ID: " + savedResident.getId());
                return savedResident;

            } catch (Exception e) {
                System.err.println(
                        "‚ö†Ô∏è [ResidentService] L·ªói khi t·∫°o resident m·ªõi (c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i): " + e.getMessage());

                // Th·ª≠ t√¨m l·∫°i m·ªôt l·∫ßn n·ªØa (c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c t·∫°o b·ªüi thread kh√°c)
                Optional<Resident> retry = residentRepository.findByUsername(username);
                if (retry.isPresent()) {
                    System.out.println(
                            "‚úÖ [ResidentService] T√¨m th·∫•y resident sau khi retry: " + retry.get().getFullName());
                    return retry.get();
                }

                // N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, throw exception
                throw new RuntimeException("Kh√¥ng th·ªÉ t·∫°o ho·∫∑c t√¨m th·∫•y resident v·ªõi username: " + username, e);
            }
        }

        System.out.println("‚úÖ [ResidentService] T√¨m th·∫•y resident: " + result.get().getFullName());
        return result.get();
    }

    public Resident save(Resident resident) {
        return residentRepository.save(resident);
    }

    public Resident findById(Long id) {
        System.out.println("üîç [ResidentService] T√¨m resident v·ªõi ID: " + id);

        return residentRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y c∆∞ d√¢n v·ªõi ID: " + id));
    }
}