package BlueMoon.bluemoon.services;

import BlueMoon.bluemoon.models.Apartment;
import BlueMoon.bluemoon.models.Resident;
import BlueMoon.bluemoon.repository.ApartmentRepository;
import BlueMoon.bluemoon.entities.TaiSanChungCu;
import BlueMoon.bluemoon.utils.AssetType;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class ApartmentService {

    @Autowired
    private ApartmentRepository apartmentRepository;

    @PersistenceContext
    private EntityManager entityManager;

    public List<Apartment> getApartmentsByResident(Resident resident) {
        System.out.println("üè† [ApartmentService] T√¨m apartments cho resident: " + resident.getUsername());

        // L·∫•y username (ch√≠nh l√† CCCD) c·ªßa resident
        String cccd = resident.getUsername();

        // T√¨m t·∫•t c·∫£ c√°c h·ªô gia ƒë√¨nh m√† c∆∞ d√¢n n√†y l√† th√†nh vi√™n (v√† ƒëang ho·∫°t ƒë·ªông)
        String jpql = "SELECT tvh.hoGiaDinh.maHo FROM ThanhVienHo tvh " +
                "WHERE tvh.doiTuong.cccd = :cccd AND tvh.ngayKetThuc IS NULL";

        List<String> maHoList = entityManager.createQuery(jpql, String.class)
                .setParameter("cccd", cccd)
                .getResultList();

        System.out.println("üìã [ApartmentService] T√¨m th·∫•y " + maHoList.size() + " h·ªô gia ƒë√¨nh cho CCCD: " + cccd);

        if (maHoList.isEmpty()) {
            System.out.println("‚ö†Ô∏è [ApartmentService] Kh√¥ng t√¨m th·∫•y h·ªô n√†o, th·ª≠ t√¨m theo owner trong b·∫£ng Apartment");
            // Fallback: t√¨m theo owner trong b·∫£ng Apartment (c·∫•u tr√∫c m·ªõi)
            List<Apartment> apartments = apartmentRepository.findByOwner(resident);
            if (apartments.isEmpty()) {
                System.out.println("‚ùå [ApartmentService] Kh√¥ng t√¨m th·∫•y apartment n√†o");
            }
            return apartments;
        }

        // T√¨m t·∫•t c·∫£ cƒÉn h·ªô (TaiSanChungCu) thu·ªôc c√°c h·ªô n√†y
        String jpqlApartments = "SELECT ts FROM TaiSanChungCu ts " +
                "WHERE ts.hoGiaDinh.maHo IN :maHoList " +
                "AND ts.loaiTaiSan = :loaiCanHo";

        List<TaiSanChungCu> taiSanList = entityManager.createQuery(jpqlApartments, TaiSanChungCu.class)
                .setParameter("maHoList", maHoList)
                .setParameter("loaiCanHo", AssetType.can_ho)
                .getResultList();

        System.out.println("‚úÖ [ApartmentService] T√¨m th·∫•y " + taiSanList.size() + " cƒÉn h·ªô t·ª´ TaiSanChungCu");

        // Chuy·ªÉn ƒë·ªïi TaiSanChungCu sang Apartment
        List<Apartment> apartments = taiSanList.stream()
                .map(ts -> convertToApartment(ts, resident))
                .collect(Collectors.toList());

        return apartments;
    }

    /**
     * Chuy·ªÉn ƒë·ªïi TaiSanChungCu sang Apartment
     */
    private Apartment convertToApartment(TaiSanChungCu taiSan, Resident resident) {
        // T√¨m xem ƒë√£ c√≥ Apartment t∆∞∆°ng ·ª©ng trong DB ch∆∞a
        String tenCanHo = taiSan.getTenTaiSan();
        List<Apartment> existing = entityManager.createQuery(
                "SELECT a FROM Apartment a WHERE a.apartmentNumber = :number", Apartment.class)
                .setParameter("number", tenCanHo)
                .getResultList();

        if (!existing.isEmpty()) {
            return existing.get(0);
        }

        // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi
        Apartment apartment = new Apartment();
        apartment.setApartmentNumber(tenCanHo);

        // Parse floor t·ª´ t√™n cƒÉn h·ªô (v√≠ d·ª•: "101" -> t·∫ßng 1, "205" -> t·∫ßng 2)
        try {
            String firstDigit = tenCanHo.replaceAll("[^0-9]", "").substring(0, 1);
            apartment.setFloor(Integer.parseInt(firstDigit));
        } catch (Exception e) {
            apartment.setFloor(1); // M·∫∑c ƒë·ªãnh t·∫ßng 1
        }

        apartment.setArea(taiSan.getDienTich() != null ? taiSan.getDienTich().doubleValue() : 0.0);
        apartment.setNumberOfRooms(3); // M·∫∑c ƒë·ªãnh 3 ph√≤ng
        apartment.setOwner(resident);
        apartment.setStatus(taiSan.getTrangThai() != null ? taiSan.getTrangThai().name() : "hoat_dong");

        // L∆∞u v√†o DB ƒë·ªÉ c√≥ ID
        apartment = apartmentRepository.save(apartment);

        System.out.println("üíæ [ApartmentService] ƒê√£ t·∫°o Apartment m·ªõi: " + apartment.getApartmentNumber() + " v·ªõi ID: "
                + apartment.getId());

        return apartment;
    }

    public Apartment save(Apartment apartment) {
        return apartmentRepository.save(apartment);
    }

    public Apartment findById(Long id) {
        System.out.println("üîç [ApartmentService] T√¨m apartment v·ªõi ID: " + id);

        return apartmentRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y cƒÉn h·ªô v·ªõi ID: " + id));
    }
}