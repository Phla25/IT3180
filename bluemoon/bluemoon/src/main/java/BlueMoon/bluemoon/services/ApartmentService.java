package BlueMoon.bluemoon.services;

import BlueMoon.bluemoon.models.Apartment;
import BlueMoon.bluemoon.models.Resident;
import BlueMoon.bluemoon.repository.ApartmentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class ApartmentService {

    @Autowired
    private ApartmentRepository apartmentRepository;

    public List<Apartment> getApartmentsByResident(Resident resident) {
        System.out.println("üè† [ApartmentService] T√¨m apartments cho resident ID: " + resident.getId());

        List<Apartment> apartments = apartmentRepository.findByOwner(resident);

        if (apartments == null || apartments.isEmpty()) {
            System.out.println("‚ùå [ApartmentService] Kh√¥ng t√¨m th·∫•y apartment theo owner");
            // L·∫•y t·∫•t c·∫£ apartments ƒë·ªÉ test (v√¨ c√≥ th·ªÉ resident ch∆∞a ƒë∆∞·ª£c g√°n l√†m owner)
            apartments = apartmentRepository.findAll();

            if (!apartments.isEmpty()) {
                System.out.println(
                        "‚ö†Ô∏è [ApartmentService] Tr·∫£ v·ªÅ t·∫•t c·∫£ " + apartments.size() + " apartments c√≥ trong DB");
            } else {
                System.out.println("‚ö†Ô∏è [ApartmentService] Database kh√¥ng c√≥ apartment n√†o!");
            }
        } else {
            System.out.println("‚úÖ [ApartmentService] T√¨m th·∫•y " + apartments.size() + " apartments c·ªßa resident");
        }

        return apartments;
    }

    public Apartment save(Apartment apartment) {
        return apartmentRepository.save(apartment);
    }

    public Apartment findById(Long id) {
        System.out.println("üîç [ApartmentService] T√¨m apartment v·ªõi ID: " + id);

        return apartmentRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y cƒÉn h·ªô v·ªõi ID: " + id));
    }
}